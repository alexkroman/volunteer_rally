<?php
// $Id: node_repeat.module,v 1.1.2.1 2009/11/30 02:09:04 olivercoleman Exp $ 

/**
 * @file
 * Allows creating duplicates of a node from repeating date sequences.
 * 
 * Author: Oliver Coleman, http://e-geek.com.au, oliver@e-geek.com.au
 */
 
define('NODE_REPEAT_PERMISSION', 'Create sequences');

/**
 * Implementation of hook_perm().
 */
function node_repeat_perm() {
  return array(NODE_REPEAT_PERMISSION);
}

/**
 * Implementation of hook_help
 */
function node_repeat_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#node_repeat":
      $output = '<p>'.  t('Allows creating duplicates of a node from repeating date sequences.') . '</p>';
      break;
  }
  return $output;
} // function node_repeat_help


function node_repeat_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'node_type_form' && isset($form['#node_type']->type['fields'])) {
    $form['node_repeat'] = array(
      '#type' => 'fieldset',
      '#title' => t('Node Repeat'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    
    //get all fields for this content type
    $type = content_types($form['#node_type']->type);
    $fields = $type['fields'];
    
    //collate date field types into options array
    $date_field_options = array();
    $options[0] = '<disabled>'; //to disable node repeats for this type
    foreach ($fields as $name => $field) {
      if ($field['type'] == 'date' || $field['type'] == 'datetime' || $field['type'] == 'datestamp') {
        $options[$name] = $name;
      }
    }
    
    $form['node_repeat']['node_repeat_type'] = array(
      '#type' => 'select',
      '#title' => t('Date field for node repeats'),
      '#default_value' => variable_get('node_repeat_type_'. $form['#node_type']->type, 0),
      '#options' => $options,
      '#description' => t('Select the field to use for node repeats, or &lt;disabled&gt; to disable node repeats for this type.'),
    );
    
    $form['node_repeat']['node_repeat_autodetachondatechange'] = array(
      '#type' => 'checkbox',
      '#title' => t('Auto detach nodes on date change'),
      '#default_value' => variable_get('node_repeat_autodetachondatechange_'. $form['#node_type']->type, 0),
      '#description' => t('If a node that is part of a sequence has its date changed, should it be detached from the sequence?'),
    );
  }
}


function node_repeat_menu() {
  $items['admin/settings/node_repeat'] = array(
    'title' => 'Node Repeat',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_repeat_admin_form'),
    'access arguments' => array(NODE_REPEAT_PERMISSION),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['node/%node/node_repeat'] = array(
    'title' => 'Repeat',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_repeat_node_settings_form', 1),
    'access callback' => 'node_repeat_menu_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );
  return $items;
}


/**
 * Determine menu access for a given node.
 *
 * This ensures that the node is repeat enabled, and that that the current
 * user should have permission to view repeat menu items.
 *
 * @param $nid
 *   The node id.
 * @return
 *   TRUE if the current node is repeat enabled and the current user has
 *   permission to access repeat menu items, otherwise FALSE.
 *
 * @see node_repeat_menu()
 */
function node_repeat_menu_access($node) {
  #return user_access(NODE_REPEAT_PERMISSION) && in_array(node_repeat_get_node_type($node->nid), node_repeat_content_types());
  return user_access(NODE_REPEAT_PERMISSION) && variable_get('node_repeat_type_'. $node->type, 0);
  
}



/**
 * Implement hook_theme().
 */
function node_repeat_theme() {
  return array(
    'node_repeat_sequences_table' => array(
      'arguments' => array(
        'form' => NULL,
      ),
    ),
    'node_repeat_sequence_nodes' => array(
      'arguments' => array(
        'form' => NULL,
      ),
    ),
  );
}



/**
 * Render the global admin form sequence list table.
 */
function theme_node_repeat_sequences_table($sequences) {
  $header = array(
    array('data' => t('Title of first node')),
    array('data' => t('Node count')),
    array('data' => t('Node type')),
    array('data' => t('Operations')),
  );
  foreach (element_children($sequences) as $key) {
    $row = array();
    foreach (array('firstnodetitle', 'nodecount', 'nodetype', 'ops') as $element) {
      // Since we're rendering these in a table, remove any #title attributes.
      if (!empty($sequences[$key][$element]['#title'])) {
        unset($sequences[$key][$element]['#title']);
      }
      $row[] = drupal_render($sequences[$key][$element]);
    }
    $rows[] = array(
      'data' => $row,
    );
  }
  
  return theme('table', $header, $rows, array('id' => 'node-repeat-admin-form-sequences-table'));
}


/**
 * Render the node admin form.
 */
function theme_node_repeat_sequence_nodes($nodes) {
  $header = array(
    array('data' => t('Title')),
    array('data' => t('Start date')),
    array('data' => t('Published')),
    array('data' => t('Operations')),
  );
  foreach (element_children($nodes) as $key) {
    $row = array();
    foreach (array('title', 'start_date', 'status', 'ops') as $element) {
      // Since we're rendering these in a table, remove any #title attributes.
      if (!empty($nodes[$key][$element]['#title'])) {
        unset($nodes[$key][$element]['#title']);
      }
      $row[] = drupal_render($nodes[$key][$element]);
    }
    $rows[] = array(
      'data' => $row,
    );
  }
    
  return theme('table', $header, $rows, array('id' => 'node-repeat-sequence-nodes-table'));
}


/**
 * Build the form for the site-wide settings.
 *
 * @param $form_state
 *   A form state array.
 *
 * @return
 *   The form structured array.
 */
function node_repeat_admin_form(&$form_state) {
  $sequences = node_repeat_get_all_sequences();
  // List sequences
  $form['sequences'] = array(
    '#theme' => 'node_repeat_sequences_table',
    '#tree' => TRUE,
    '#type' => 'fieldset',
    '#title' => t('Existing sequences'),
    '#description' => t("This table lists all existing sequences."),
  );
  if (!empty($sequences)) {
    foreach ($sequences as $seqid => $seq) {
      $node_info = node_repeat_get_node_info($seq['nids'][0]);
      $form['sequences'][$seqid]['firstnodetitle'] = array(
        '#title' => t('Title of first node'),
        '#type' => 'markup',
        '#value' => l($node_info['title'], 'node/'. $seq['nids'][0]),
      );
      $form['sequences'][$seqid]['nodecount'] = array(
        '#title' => t('Node count'),
        '#type' => 'markup',
        '#value' => count($seq['nids']),
      );
      $form['sequences'][$seqid]['nodetype'] = array(
        '#title' => t('Node type'),
        '#type' => 'markup',
        '#value' => $seq['nodetype'],
      );
      $form['sequences'][$seqid]['ops'] = array(
        '#title' => t('Operations'),
        '#type' => 'markup',
        '#value' => l(t('edit'), 'node/' . $seq['nids'][0] . '/node_repeat'),
      );
    }
  }

  return $form;
}


function node_repeat_node_settings_form($form_state, $node) {
  //check if node is already part of a sequence
  $result = db_query("SELECT seqid FROM {node_repeat_sequence_member} WHERE nid = %d", $node->nid);
  $seqid = -1;
  if ($row = db_fetch_array($result)) {
    $seqid = $row['seqid'];
  }
  
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );
  
  //not part of a sequence, build sequence creation form
  if ($seqid == -1) {
    $form['newsequence'] = array(
      '#type' => 'fieldset',
      '#title' => t('New sequence'),
      '#tree' => TRUE,
    );
      
    $field = variable_get('node_repeat_type_'. $node->type, 0);
    $field = $node->$field;
    $date_type = $field[0]['date_type'];
    $date_tz = $field[0]['timezone'];
    $date_tzdb = $field[0]['timezone_db'];
    $start_date = date_make_date($field[0]['value'], $date_tzdb, $date_type);
    date_timezone_set($start_date, timezone_open($date_tz));
    
    $form['newsequence']['start_date_display'] = array(
      '#type' => 'markup',
      '#value' => 'Start date for this node is '. date_format_date($start_date, 'large'),
    );
    
    $form['newsequence']['rrule'] = array(
      '#type' => 'date_repeat_rrule',
    );
    
    $form['status'] = array(
      '#type' => 'select',
      '#title' => t('Make new nodes published'),
      '#options' => array(
        '0' => 'Unpublished',
        '1' => 'Published',
      ),
      '#description' => t('Should the newly created nodes be marked as published?'),
    );
    
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Create new sequence'),
    );
  } 
  else { //node is part of a sequence, build node list form
    $sequence = node_repeat_get_sequence($seqid);
    
    $form['seqid'] = array(
      '#type' => 'hidden',
      '#value' => $seqid,
    );
    
    $form['help'] = array(
      '#type' => 'item',
      '#description' => t("This node is part of a sequence, the nodes that are part of the sequence are listed below."),
    );
    
    $form['rule'] = array(
      '#type' => 'markup',
      '#value' => 'The sequence was generated according to the rule: '. date_repeat_rrule_description($sequence['rrule']),
    );
    
    $nids = $sequence['nids'];
    
    $form['sequence'] = array(
      '#type' => 'fieldset',
      '#title' => t('Existing sequence'),
      '#tree' => TRUE,
      '#theme' => 'node_repeat_sequence_nodes',
    );
    foreach ($nids as $nid) {
      $node_info = node_repeat_get_node_info($nid);
      $form['sequence'][$nid]['title'] = array(
        '#title' => t('Title'),
        '#type' => 'markup',
        '#value' => l($node_info['title'], 'node/'. $nid),
      );
      $form['sequence'][$nid]['start_date'] = array(
        '#title' => t('Start date'),
        '#type' => 'markup',
        '#value' => date_format_date(node_repeat_get_node_start_date($nid, TRUE), 'medium'),
      );
      $form['sequence'][$nid]['status'] = array(
        '#title' => t('Published'),
        '#type' => 'markup',
        '#value' => ($node_info['status'] == 1 ? 'Yes' : 'No'),
      );
      $form['sequence'][$nid]['ops'] = array(
        '#title' => t('Operations'),
        '#type' => 'markup',
        '#value' => l(t('edit'), 'node/' . $nid . '/edit'),
      );
    }
    
    $form['action_type'] = array(
      '#type' => 'select',
      '#title' => t('Action to perform'),
      '#options' => array(
        'none' => '<Select an action>',
        'unpublish' => 'Unpublish',
        'publish' => 'Publish',
        'delete' => 'Delete',
        'detach' => 'Detach from sequence',
      ),
      '#description' => t('Select the action to perform on the nodes in this sequence.'),
    );
    
    //TODO: add select checkboxes to nodes in sequence and add a 'Selected nodes' option to below
    $form['action_apply'] = array(
      '#type' => 'select',
      '#title' => t('Nodes to apply action to'),
      '#options' => array(
        'all_but_this' => 'All but this node',
        'all_but_first' => 'All but first node',
        'all' => 'All nodes',
      ),
      '#description' => t('Select the nodes to apply the action to.'),
    );
    
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Apply',
    );
  }
  
  return $form;
}


function node_repeat_node_settings_form_submit($form, &$form_state) {
  //if we're creating a new sequence
  if (isset($form_state['values']['newsequence'])) {
    $nid = $form_state['values']['nid'];
    $node = node_load($nid);
    
    $field_name = variable_get('node_repeat_type_'. $node->type, 0);
    $field = $node->$field_name;
    $date_type = $field[0]['date_type'];
    $date_format = node_repeat_get_date_format($date_type);
    $start_date = $field[0]['value'];
    if (isset($field[0]['value2']) && !empty($field[0]['value2'])) {
      $date_diff = date_difference(date_make_date($start_date, NULL, $date_type), date_make_date($field[0]['value2'], NULL, $date_type));
    }
    $date_tz = $field[0]['timezone'];
    $date_tzdb = $field[0]['timezone_db'];
    
    $rrule = $form_state['values']['newsequence']['rrule'];
    $rrule_fields = date_ical_parse_rrule(NULL, $rrule);
    
    //calculate repeat date and times
    $start_datetime = date_convert($start_date, $date_type, DATE_DATETIME);
    $datetimes = date_repeat_calc($rrule, $start_datetime, $rrule_fields['UNTIL']['datetime']);
    array_shift($datetimes); //don't need date for existing node
    
    //add sequence and first node to db
    $seqid = node_repeat_new_sequence($rrule);
    node_repeat_add_node_to_sequence($seqid, $node->nid);
    
    //CREATE DUPLICATE NODES
    //prepare node template
    unset($node->nid);
    unset($node->uid);
    unset($node->vid);
    unset($node->revision_uid);
    unset($node->created);
    unset($node->changed);
    unset($node->revision_timestamp);
    unset($node->path);
    #unset($node->0);
    unset($node->last_comment_timestamp);
    unset($node->last_comment_name);
    unset($node->comment_count);
    $node->status = $form_state['values']['status'];
    if (!isset($date_diff)) {
      unset($field[0]['value2']); //probably not necessary
    }
    //create new node for each date
    foreach ($datetimes as $dt) {
      $new_node = drupal_clone($node);
      
      $field[0]['value'] = date_format(date_make_date($dt, $date_tzdb), $date_format);
      if (isset($date_diff)) {
        $end_date = date_make_date($dt, $date_tzdb);
        date_modify($end_date, '+' . $date_diff . " seconds");
        $field[0]['value2'] = date_format($end_date, $date_format);
      }
      
      $new_node->$field_name = $field;
      $new_node = node_submit($new_node);
      node_save($new_node);
      node_repeat_add_node_to_sequence($seqid, $new_node->nid);
    }
  }
  else { //we're editing an existing sequence
    if ($form_state['values']['action_type'] == 'none') {
      return;
    }
    
    $seqid = $form_state['values']['seqid'];
    
    //get list of nodes to apply action to
    $nids = node_repeat_get_seq_nids($seqid);
    
    $keep_nid = -1;
    if ($form_state['values']['action_apply'] == 'all_but_this') {
      $keep_nid = $form_state['values']['nid'];
    }
    elseif ($form_state['values']['action_apply'] == 'all_but_first') {
      $keep_nid = $nids[0];
    }
    
    $deleted_this_node = FALSE;
    foreach ($nids as $nid) {
      if ($nid != $keep_nid) {
        switch ($form_state['values']['action_type']) {
          case 'unpublish':
            $node = node_load($nid);
            $node->status = 0;
            node_save($node);
            break;
          case 'publish':
            $node = node_load($nid);
            $node->status = 1;
            node_save($node);
            break;
          case 'delete':
            node_delete($nid);
            //will be automatically removed from sequence
            if ($nid == $form_state['values']['nid']) {
              $deleted_this_node = TRUE;
            }
            break;
          case 'detach':
            node_repeat_remove_node_from_sequence($nid);
            //TODO: add to exception list
            break;
        }
      }
    }
    
    if ($deleted_this_node) {
      //go to home page (maybe if the sequence still exists we should redirect to the repeat page of the first node)
      drupal_goto(); 
    }
  }
}


/**
 * Returns a list of content types that are repeat enabled.
 */
function node_repeat_content_types() {
  $content_types = array();
  foreach (node_get_types('names') as $content_type => $content_name) {
    if (variable_get('node_repeat_type_'. $node->type, 0) != 0) {
      $content_types[] = $content_type;
    }
  }
  return $content_types;
}


/**
 * Get sequence data from the DB
 */
function node_repeat_get_sequence($seqid) {
  $result = db_query("SELECT * FROM {node_repeat_sequence} WHERE seqid = %d", $seqid);
  if ($sequence = db_fetch_array($result)) {
    $sequence['nids'] = node_repeat_get_seq_nids($seqid);
    $node_info = node_repeat_get_node_info($sequences[$seqid]['nids'][0]);
    $sequence['nodetype'] = $node_info['type'];
    return $sequence;
  }
  return NULL;
}


/**
 * Get all sequence data from the DB
 */
function node_repeat_get_all_sequences() {
  $sequences = array();
  $result = db_query("SELECT * FROM {node_repeat_sequence} ORDER BY seqid");
  while ($row = db_fetch_array($result)) {
    $seqid = $row['seqid'];
    $sequences[$seqid] = $row;
    $sequences[$seqid]['nids'] = node_repeat_get_seq_nids($seqid);
    $node_info = node_repeat_get_node_info($sequences[$seqid]['nids'][0]);
    $sequences[$seqid]['nodetype'] = $node_info['type'];
  }
  return $sequences;
}


/**
 * Get all node IDs for sequence
 */
function node_repeat_get_seq_nids($seqid) {
  $result = db_query("SELECT nid FROM {node_repeat_sequence_member} WHERE seqid = %d ORDER BY nid", $seqid);
  $nids = array();  
  while ($row = db_fetch_array($result)) {
    $nids[] = $row['nid'];
  }
  return $nids;
}


/**
 * If the given node belongs to a sequence returns the sequence ID, otherwise returns FALSE.
 */
function node_repeat_get_node_sequence_id($nid) {
  $result = db_query("SELECT seqid FROM {node_repeat_sequence_member} WHERE nid = %d", $nid);
  if ($row = db_fetch_array($result)) {
    return $row['seqid'];
  }
  return FALSE;
}


/**
 * Get info for a node.
 */
function node_repeat_get_node_info($nid) {
  $result = db_query("SELECT title, type, status FROM {node} WHERE nid = %d", $nid);
  if ($row = db_fetch_array($result)) {
    return $row;
  }
  return NULL;
}


/**
 * Get start date of a node. (returns Date object)
 */
function node_repeat_get_node_start_date($nid, $timezone_adjust) {
  $node = node_load($nid);
  
  $field_name = variable_get('node_repeat_type_'. $node->type, 0);
  $field = $node->$field_name;
  $start_date = $field[0]['value'];
  $date_type = $field[0]['date_type'];
  
  if ($timezone_adjust) {
    $date_tz = $field[0]['timezone'];
    $date_tzdb = $field[0]['timezone_db'];
    $start_date = date_make_date($start_date, $date_tzdb, $date_type);
    date_timezone_set($start_date, timezone_open($date_tz));
  } 
  else {
    $start_date = date_make_date($start_date, NULL, $date_type);
  }
  return $start_date;
}




/**
 * If a node belonging to a sequence is deleted or its date changed, detach 
 * it from the sequence.
 */
function node_repeat_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op == 'delete') {
    node_repeat_remove_node_from_sequence($node->nid);
  }
  
  elseif ($op == 'presave') {
    if (variable_get('node_repeat_autodetachondatechange_'. $node->type, 0)) {
      //compare orig and new values of date field, and detach if changed
      $field_name = variable_get('node_repeat_type_'. $node->type, 0);
      
      $field_new = $node->$field_name;
      $start_date_new = $field_new[0]['value'];
      
      if ($node_orig = node_load($node->nid)) {
        $field_orig = $node_orig->$field_name;
        $start_date_orig = $field_orig[0]['value'];
        
        if ($start_date_new != $start_date_orig) {
          node_repeat_remove_node_from_sequence($node->nid);
          drupal_set_message(t('The node was removed from its node repeat sequence'));
        }
      }
    }
  }
}


function node_repeat_new_sequence($rrule) {
  db_query("INSERT INTO {node_repeat_sequence} (rrule) VALUES ('%s')", $rrule);
  return db_last_insert_id("node_repeat_sequence", "seqid");
}

function node_repeat_remove_sequence($seqid) {
  db_query("DELETE FROM {node_repeat_sequence} WHERE seqid = %d", $seqid);
  db_query("DELETE FROM {node_repeat_sequence_member} WHERE seqid = %d", $seqid);
}

function node_repeat_add_node_to_sequence($seqid, $nid) {
  db_query("INSERT INTO {node_repeat_sequence_member} (seqid, nid) VALUES (%d, %d)", $seqid, $nid);
}

function node_repeat_remove_node_from_sequence($nid) {
  $seqid = db_result(db_query("SELECT seqid FROM {node_repeat_sequence_member} WHERE nid = %d", $nid));
  db_query("DELETE FROM {node_repeat_sequence_member} WHERE nid = %d", $nid);
  //if there is only one (or less) nodes in the sequence, remove the sequence
  $nids = node_repeat_get_seq_nids($seqid);
  if (count($nids) <= 1) {
    node_repeat_remove_sequence($seqid);
  }
}

function node_repeat_get_date_format($field_type) {
  $DATE_FORMAT_CONV = array(
    'date' => 'Y-m-d\TH:i:s',  //ISO
    'datestamp' => 'U',  //UNIX
    'datetime' => 'Y-m-d H:i:s',  //DATETIME
  );
  return $DATE_FORMAT_CONV[$field_type];
}

function node_repeat_get_date_type($field_type) {
  $DATE_FORMAT_CONV = array(
    'date' => 'ISO',
    'datestamp' => 'UNIX',
    'datetime' => 'DATETIME',
  );
  return $DATE_FORMAT_CONV[$date_type];
}